aa
bb
cc
dd
ee
ff
gg
hh
ii
jj
aa
bb
cc
dd
hh
sink("model.txt")
cat("
model{
for(i in 1:N){
for(j in 1:2){
y[i,j] ~ dbin(pie[i,j],n[i,j])
logit(pie[i,j]) <- mu[i] + (2*j - 3) * delta[i]/2
}
mu[i] ~ dnorm(mu0, tau.mu)
delta[i] ~ dnorm(delta0, tau.delta)
}
mu0 ~ dnorm(aa, ee)
tau.mu ~ dunif(bb, ff)
delta0 ~ dnorm(cc, gg)
tau.delta ~ dunif(dd, hh)
}
", fill = TRUE)
sink()
data = list(n=nn, y=yy, N=nrow(nn))
inits = rep(
list(
list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE),
mu=rep(0,11), delta=rep(0,11),
mu0=0, tau.mu=0.001, delta0=0, tau.delta=0.001,
aa=0, ee=1/3.36, bb=0, ff=1/3.36, cc=0, gg=1/2.17, dd=0, hh=1/2.17
)
)
,3)
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
namesd = list(c("Brener","Buszman","Chieffo","Makikallio","Palmerini","Sanmartin","Serruys","Seung","Silvestri","White","Wu"),c("Stent","CABG")) # labels for data table
nn = matrix(c(71,174,52,53,107,142,49,238,86,103,49,241,357,348,516,512,186,218,36,41,70,80), nrow=11, ncol=2, byrow=T) # number of people in each treatment group in each study
yy = matrix(c(4,1,3,2,12,3,15,19,18,5,11,10,4,9,25,11,20,15,17,25,4,5), nrow=11, ncol=2, byrow=F) # idem, but for the number of deaths after one year of the treatment
dimnames(nn) = dimnames(yy) = namesd
pp = yy/nn # mortality rates
round(pp,2)
round(apply(pp,2,mean),2)
logit = function(x) log(x/(1-x)) # creates logit function
ilogit = function(x) exp(x)/(1+exp(x)) # creates inverse logit function
library(R2jags)
library(lattice)
library(ggplot2)
# Jags input info
data = list(n=nn, y=yy, N=nrow(nn))
inits = rep(
list(
list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE),
mu=rep(0,11), delta=rep(0,11),
mu0=0, tau.mu=0.001, delta0=0, tau.delta=0.001,
aa=0, ee=1/3.36, bb=0, ff=1/3.36, cc=0, gg=1/2.17, dd=0, hh=1/2.17
)
)
,3)
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
model.out = jags(data=data, inits= NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
data = list(n=nn, y=yy, N=nrow(nn), # raw data
aa=0, ee=1/3.36, bb=0, ff=1/3.36, cc=0, gg=1/2.17, dd=0, hh=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.001, delta0=0, tau.delta=0.001 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits= inits, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits= inits, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
i
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01, # hyper-parameters to be estimated
aa=0, ee=1/3.36, bb=0, ff=1/3.36, cc=0, gg=1/2.17, dd=0, hh=1/2.17
)),3) # number of chains
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0, # hyper-parameters to be estimated
aa=0, ee=1/3.36, bb=0, ff=1/3.36, cc=0, gg=1/2.17, dd=0, hh=1/2.17
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
data
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
mm
sink("model.txt")
cat("
model{
for(i in 1:N){
for(j in 1:2){
y[i,j] ~ dbin(pie[i,j],n[i,j])
logit(pie[i,j]) <- mu[i] + (2*j - 3) * delta[i]/2
}
mu[i] ~ dnorm(mu0, tau.mu)
delta[i] ~ dnorm(delta0, tau.delta)
}
mu0 ~ dnorm(mm,mt)
tau.mu ~ dunif(tm1,tm2)
delta0 ~ dnorm(dm,dt)
tau.delta ~ dunif(td1,td2)
}
", fill = TRUE)
sink()
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0, # hyper-parameters to be estimated
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
# Take the first 1000 runs as burnin
Output = AddBurnin(model.out$BUGSoutput$sims.array, burnin=1000,n.thin=1)
source("AddBurnin.R")
inits =
dataD1 = list(n=nn, y=yy, N=nrow(nn),
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17)
inits1 = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE),
mu=rep(0,11), delta=rep(0,11),
mu0=0, tau.mu=0, delta0=0, tau.delta=0,
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17
)),3) # number of chains
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0, # hyper-parameters to be estimated
mm=NA, mt=NA, tm1=NA, tm2=NA, dm=NA, dt=NA, td1=NA, td2=NA
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
data = list(n=nn, y=yy, N=nrow(nn), # raw data
) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0, # hyper-parameters to be estimated
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
sink("model.txt")
cat("
model{
for(i in 1:N){
for(j in 1:2){
y[i,j] ~ dbin(pie[i,j],n[i,j])
logit(pie[i,j]) <- mu[i] + (2*j - 3) * delta[i]/2
}
mu[i] ~ dnorm(mu0, tau.mu)
delta[i] ~ dnorm(delta0, tau.delta)
}
mu0 ~ dnorm(mm,mt)
tau.mu ~ dunif(tm1,tm2)
delta0 ~ dnorm(dm,dt)
tau.delta ~ dunif(td1,td2)
}
", fill = TRUE)
sink()
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0, delta0=0, tau.delta=0 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=1, delta0=0, tau.delta=1 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=1, delta0=0, tau.delta=1 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
mm=0, mt=1/3.36, tm1=0.01, tm2=1/3.36, dm=0, dt=1/2.17, td1=0.01, td2=1/2.17) # parameters that define the prior distributions
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0.01, tm2=1/3.36, dm=0, dt=1/2.17, td1=0.01, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
data = list(n=nn, y=yy, N=nrow(nn), # raw data
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=0, dt=1/2.17, td1=0, td2=1/2.17) # parameters that define the prior distributions
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01 # hyper-parameters to be estimated
)),3) # number of chains
params = c("pie[1:11,1:2]","mu[1:11]","delta[1:11]","mu0","delta0","tau.mu","tau.delta")
# Jags output
model.out = jags(data=data, inits=null, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=11000, n.burnin=0, n.thin=20, DIC=F)
matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE)
rbeta(1)
rbeta(1,2)
rbeta(1,2,1)
rbeta(1,2,1)
rbeta(1,2,1)
rbeta(1,2,1)
rbeta(1,2,1)
rbeta(1,2,1)
rbeta(1,2,1)
?rbeta
rbeta(22,2,2)
matrix(rbeta(22,2,2), ncol=2, nrow=11, byrow=TRUE)
inits = rep(list(list(
pie=matrix(rbeta(22,2,2), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01 # hyper-parameters to be estimated
)),3) # number of chains
model.out = jags(data=data, inits=inits, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
inits = rep(list(list(
pie=matrix(rep(0.5,22), ncol=2, nrow=11, byrow=TRUE), # death probabilities per study per treatment
mu=rep(0,11), delta=rep(0,11), # study-level parameters
mu0=0, tau.mu=0.01, delta0=0, tau.delta=0.01 # hyper-parameters to be estimated
)),3) # number of chains
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
# Take the first 1000 runs as burnin
Output = AddBurnin(model.out$BUGSoutput$sims.array, burnin=1000,n.thin=1)
dataD1 = list(n=nn, y=yy, N=nrow(nn),
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=1, dt=1/2.17, td1=0, td2=1/2.17)
model.out1 = jags(data=data1, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
dataD1 = list(n=nn, y=yy, N=nrow(nn),
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=1, dt=1/2.17, td1=0, td2=1/2.17)
# Jags output
model.outD1 = jags(data=dataD1, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
dataD1 = list(n=nn, y=yy, N=nrow(nn),
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36, dm=1, dt=1/2.17, td1=0, td2=1/2.17)
# Jags output
model.outD1 = jags(data=dataD1, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=31000, n.burnin=0, n.thin=20, DIC=F)
outparamsD1 = dimnames(model.outD1$BUGSoutput$sims.array)[[3]]
OutputD1 = AddBurnin(model.outD1$BUGSoutput$sims.array, burnin=1000,n.thin=1)
OutputD1$Burnin.Summary
Output$Burnin.Summary
outparams
head(model.out)
Output
nrow(Output$Burnin.sims.matrix)
Output$Burnin.sims.matrix[,"delta0"]
head(Output$Burnin.sims.matrix)
list(Output$Burnin.Summary,Output$Burnin.sims.matrix[,"delta0"])
head(Output$Burnin.sims.matrix[,"delta0"])
head(list(Output$Burnin.Summary,Output$Burnin.sims.matrix[,"delta0"]))
str(list(Output$Burnin.Summary,Output$Burnin.sims.matrix[,"delta0"]))
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
posts = Output$Burnin.sims.matrix
pp0Stent = ilogit(posts[,"mu0"]-posts[,"delta0"]) # posterior distribution of pie 0 for Stent
pp0CABG = ilogit(posts[,"mu0"]+posts[,"delta0"]) # posterior distribution of pie 0 for CABG
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
senan = function(ni=31000,
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36,
dm=-1, dt=1/2.17, td1=0, td2=1/2.17){
data = list(n=nn, y=yy, N=nrow(nn),
mm=mm, mt=mt, tm1=tm1, tm2=tm2, dm=dm, dt=dt, td1=td1, td2=td2)
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=ni, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]]
Output = AddBurnin(model.out$BUGSoutput$sims.array, burnin=1000,n.thin=1)
return(list(Output$Burnin.Summary,Output$Burnin.sims.matrix[,"delta0"]))
}
senan = function(ni=31000,
mm=0, mt=1/3.36, tm1=0, tm2=1/3.36,
dm=0, dt=1/2.17, td1=0, td2=1/2.17){
data = list(n=nn, y=yy, N=nrow(nn),
mm=mm, mt=mt, tm1=tm1, tm2=tm2, dm=dm, dt=dt, td1=td1, td2=td2)
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=ni, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]]
Output = AddBurnin(model.out$BUGSoutput$sims.array, burnin=1000,n.thin=1)
return(list(Output$Burnin.Summary,Output$Burnin.sims.matrix[,"delta0"]))
}
D1 = senan(dm=1)
outparams
dimnames(model.out$BUGSoutput$sims.array)
Dn1 = senan(dm=-1)
M1 = senan(mm=1)
Mn1 = senan(mm=-1)
1/3.36
1/3.36/2
1/3.36*2
Sd2 = senan(tm2=1/3.36/2)
Sm2 = senan(tm2=1/3.36*2)
Td2 = senan(td2=1/2.17/2)
Tm2 = senan(td2=1/2.17*2)
plot(density(posts[,"delta0"]))
model.out = jags(data=data, inits=NULL, parameter=params, "model.txt", n.chains=3, n.iter=101000, n.burnin=0, n.thin=20, DIC=F)
outparams = dimnames(model.out$BUGSoutput$sims.array)[[3]] # all parameter names estimated by jags
# Take the first 1000 runs as burnin
Output = AddBurnin(model.out$BUGSoutput$sims.array, burnin=1000,n.thin=1)
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]))
pp0Stent = ilogit(posts[,"mu0"]-posts[,"delta0"]) # posterior distribution of pie 0 for Stent
pp0CABG = ilogit(posts[,"mu0"]+posts[,"delta0"]) # posterior distribution of pie 0 for CABG
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
par(mfrow=c(1,2))
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
pp0Stent = ilogit(posts[,"mu0"]-posts[,"delta0"]) # posterior distribution of pie 0 for Stent
pp0CABG = ilogit(posts[,"mu0"]+posts[,"delta0"]) # posterior distribution of pie 0 for CABG
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
par(mfrow=c(1,1))
mtext("A",font=2,side=3)
par(mfrow=c(1,2))
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
mtext("A",font=2,side=3)
pp0Stent = ilogit(posts[,"mu0"]-posts[,"delta0"]) # posterior distribution of pie 0 for Stent
pp0CABG = ilogit(posts[,"mu0"]+posts[,"delta0"]) # posterior distribution of pie 0 for CABG
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
par(mfrow=c(1,1))
mtext("A",font=2,side=3,-2)
par(mfrow=c(1,2))
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
mtext("A",font=2,side=3,-2)
mtext("A",font=2,side=3,at=-1)
mtext("A",font=2,side=3,at=-2)
mtext("A",font=2,side=3,at=-2,line=-1)
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
mtext("A",font=2,side=3,at=-2,line=-1)
mtext("A",font=2,side=3,at=-2,line=-1.5)
posts = Output$Burnin.sims.matrix
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
mtext("A",font=2,side=3,at=-2,line=-1.5)
plot(density(pp0Stent),xlab=expression(paste(pi[0])),main="")
lines(density(pp0CABG),lty=2)
legend("topright",legend=c("Stent","CABG"),lty=1:2,bty="n")
mtext("B",font=2,side=3,at=0,line=-1.5)
head(posts)
boxplot(posts[,paste("delta[",1:11,"]")])
paste("delta[",1:11,"]")
boxplot(posts[,paste("delta[",1:11,"]",sep="")])
par(mfrow=c(1,1))
boxplot(posts[,paste("delta[",1:11,"]",sep="")])
nrow(posts)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")])
?boxplot
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,axes=F)
axis(side=2)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,axes=F,bty="l")
axis(side=2)
axis(side=1,at=1:11,labels=expression(paste(delta,1:11)))
paste(delta,1:11)
axis(side=1,at=1:11,labels=paste(expression(delta)))
axis(side=1,at=1,labels=paste(expression(delta)))
axis(side=1,at=1,labels=expression(paste(delta)))
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,axes=F)
axis(side=1,at=1,labels=expression(paste(delta)))
axis(side=1,at=1:11,labels=expression(paste(delta[1:11])))
axis(side=1,at=2,labels=expression(paste(delta[1])))
namesd
namesd[[1]]
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n")
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
axis(side=1,at=1:11,labels=namesd[[1]])
?axis
axis(side=1,at=1:11,labels=namesd[[1]],outer=T,srt=45)
mtext(side=1,at=1:11,labels=namesd[[1]],outer=T,srt=45)
mtext(side=1,at=1:11,text=namesd[[1]],outer=T,srt=45)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
mtext(side=1,at=1:11,text=namesd[[1]],outer=T,srt=45)
mtext(side=1,at=1:11,text=namesd[[1]],outer=T,srt=45)
mtext(side=1,at=1:11,text=namesd[[1]],srt=45)
mtext(side=1,at=1:11,text=namesd[[1]])
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
mtext(side=1,at=5,text=namesd[[1]][1])
text(x=5, y=-2.5, namesd[[1]][1], xpd=T, srt=45, pos=2)
text(x=5, y=-2.5, namesd[[1]][1], xpd=T, srt=-45, pos=2)
text(x=1:11, y=-2.5, namesd[[1]], xpd=T, srt=-45, pos=2)
text(x=1:11, y=-3, namesd[[1]], xpd=T, srt=-45, pos=2)
text(x=1:11, y=-4, namesd[[1]], xpd=T, srt=-45, pos=2)
text(x=1:11,y=-4.5,namesd[[1]],xpd=T,srt=-45,pos=2)
text(x=1:11+0.5,y=-4.5,namesd[[1]],xpd=T,srt=-45,pos=2)
text(x=1:11+1,y=-4.5,namesd[[1]],xpd=T,srt=-45,pos=2)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+1,y=-4.5,namesd[[1]],xpd=T,srt=-45,pos=2)
?text
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+1,y=-4.5,namesd[[1]],xpd=T,srt=-45,pos=1)
text(x=1:11+1,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+1,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0)
text(x=1:11+1,y=-4,namesd[[1]],xpd=T,srt=-45,pos=2,offset=0)
text(x=1:11+1,y=-4,namesd[[1]],xpd=T,srt=-45,pos=0,offset=0)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+1,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0)
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0)
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0,adj=1)
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,pos=1,offset=0,adj=0)
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11+.5,y=-4,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
text(x=1:11+.5,y=-3.5,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
text(x=1:11,y=-3.5,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
text(x=1:11,y=-3.5,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
abline(h=0,lty=3)
boxplot(posts[1:1000,paste("delta[",1:11,"]",sep="")],range=0,xaxt="n",ylab=expression(paste(delta[i])))
abline(h=0,lty=3,col="grey")
text(x=1:11,y=-3.5,namesd[[1]],xpd=T,srt=-45,offset=0,adj=0)
plot(density(posts[,"delta0"]))
plot(density(posts[,"delta0"]),xlab=expression(paste(delta[0])),main="")
